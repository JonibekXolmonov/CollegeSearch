package com.bera.josaahelpertool.use_cases

import android.content.ContentValues
import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.Typeface
import android.graphics.pdf.PdfDocument
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.provider.MediaStore
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import com.bera.josaahelpertool.R
import com.bera.josaahelpertool.models.CutoffItem
import com.bera.josaahelpertool.screens.cutoffsbyrank.CBRState
import com.bera.josaahelpertool.utils.Constants
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import javax.inject.Inject

class GeneratePdfUseCase @Inject constructor(private val context: Context) {

    suspend operator fun invoke(cutoffs: ArrayList<CutoffItem>, state: CBRState) {

        val rank: Int = state.rank
        val exam: String = state.gender
        val gender: String = state.gender
        val pwd: Boolean = state.pwd
        val quota: String = state.quota
        val st: String = state.state

        val bmp = BitmapFactory.decodeResource(context.resources, R.drawable.josaa_made_easy)
        val scaledbmp = Bitmap.createScaledBitmap(bmp, 140, 140, false)

        val pageHeight = 1120
        val pageWidth = 792
        // creating an object variable
        // for our PDF document.
        val pdfDocument = PdfDocument()

        // two variables for paint "paint" is used
        // for drawing shapes and we will use "title"
        // for adding text in our PDF file.
        val paint = Paint()
        val title = Paint()

        val list1: List<CutoffItem> = cutoffs.filter {
            it.ClosingRank.toInt() < rank + 15e3
                    && (it.Gender.contains(gender))
                    && (it.SeatType.contains(quota))
                    && (if (pwd) it.SeatType.contains("PwD")
            else !it.SeatType.contains("PwD")) && it.Quota == st
        }

        val list = list1
            .mapNotNull { item ->
                cutoffs.find {
                    it.Institute == item.Institute
                            && it.AcademicProgramName == item.AcademicProgramName
                            && it.SeatType == "OPEN"
                            && it.Gender == "Gender-Neutral"
                }
            }
            .sortedBy { it.ClosingRank.toInt() }
            .mapNotNull {item ->
                cutoffs.find {
                    it.Institute == item.Institute
                            && it.AcademicProgramName == item.AcademicProgramName
                            && it.SeatType.contains(quota)
                            && it.Gender.contains(gender)
                }
            }
            .filterNot {
                it.AcademicProgramName.contains("Architecture")
                        || it.AcademicProgramName.contains("Planning")
                        || it.Institute.contains(Constants.IIT_STRING)
                        || it.Institute.contains(Constants.IIT_STRING_1)
            }

        // we are adding page info to our PDF file
        // in which we will be passing our pageWidth,
        // pageHeight and number of pages and after that
        // we are calling it to create our PDF.
        val mypageInfo = PdfDocument.PageInfo.Builder(pageWidth, pageHeight, 1).create()

        // below line is used for setting
        // start page for our PDF file.
        var myPage = pdfDocument.startPage(mypageInfo)

        // creating a variable for canvas
        // from our page of PDF.
        var canvas: Canvas = myPage.canvas

        canvas.drawBitmap(scaledbmp, 56F, 40F, paint)

        title.typeface = Typeface.create(Typeface.DEFAULT, Typeface.ITALIC)
        title.textSize = 8F
        title.color = Color.Gray.toArgb()

        canvas.drawText(
            "This is a recommended list for JoSAA choice filling of JEE Main colleges only based on " +
                    "your selected parameters generated by our algorithm. Note: This list is the result of " +
                    "analysis of previous year's cutoffs",
            40F,
            180F,
            title
        )
        canvas.drawText(
            "and choices of students matching your criteria. " +
                    "This tool is made to assist you. Do not take it directly as choice-filling/counselling advice. " +
                    "Do your own research before participating in JoSAA counselling.",
            40F,
            194F,
            title
        )
        canvas.drawText(
            "This list excludes all IITs as of now owing to insufficient available data. Opening and " +
                    "closing ranks listed are based on your chosen parameters and may vary.",
            40F,
            208F,
            title
        )

        title.typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
        title.textSize = 8F
        title.color = Color.DarkGray.toArgb()

        canvas.drawText(
            "Sl. No.",
            40F,
            230F,
            title
        )
        canvas.drawText(
            "Institute",
            80F,
            230F,
            title
        )
        canvas.drawText(
            "Academic Program Name",
            300F,
            230F,
            title
        )
        canvas.drawText(
            "Opening Rank",
            600F,
            230F,
            title
        )
        canvas.drawText(
            "Closing Rank",
            700F,
            230F,
            title
        )
        title.typeface = Typeface.create(Typeface.DEFAULT, Typeface.NORMAL)

        var count = 0
        list.forEachIndexed { i, cutoff ->
            if ((i == 50 || i % 60 == 0) && i != 0 && i!= 60) {
                pdfDocument.finishPage(myPage)
                myPage = pdfDocument.startPage(mypageInfo)
                canvas = myPage.canvas
                count = 0
            }
            val y = if (i < 50) 250F + count * 14F else 120F + count * 14F
            canvas.drawText(
                (i+1).toString(),
                40F,
                y,
                title
            )
            canvas.drawText(
                if (cutoff.Institute.length > 56) cutoff.Institute.substring(
                    0,
                    50
                ) + ".." else cutoff.Institute,
                80F,
                y,
                title
            )
            canvas.drawText(
                if (cutoff.AcademicProgramName.length > 70) cutoff.AcademicProgramName.substring(
                    0,
                    50
                ) + ".." else cutoff.AcademicProgramName,
                300F,
                y,
                title
            )
            canvas.drawText(
                cutoff.OpeningRank,
                600F,
                y,
                title
            )
            canvas.drawText(
                cutoff.ClosingRank,
                700f,
                y,
                title
            )
            count++
        }
        // after adding all attributes to our
        // PDF file we will be finishing our page.
        pdfDocument.finishPage(myPage)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            savePdfToDownloadsUsingMediaStore(pdfDocument)
        } else {
            savePdfToDownloadsUsingFileIO(pdfDocument)
        }
        // after storing our pdf to that
        // location we are closing our PDF file.
        pdfDocument.close()
    }

    @RequiresApi(Build.VERSION_CODES.Q)
    private suspend fun savePdfToDownloadsUsingMediaStore(pdfDocument: PdfDocument) {
        // Create a ContentValues object to specify the metadata for the file
        val values = ContentValues().apply {
            put(MediaStore.Downloads.DISPLAY_NAME, "josaa-made-easy.pdf")
            put(MediaStore.Downloads.MIME_TYPE, "application/pdf")
            put(MediaStore.Downloads.IS_PENDING, 1)
        }

        // Use the ContentResolver to create a new file in the MediaStore
        val uri: Uri? =
            context.contentResolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, values)

        try {
            // Get an OutputStream to write your data to
            uri?.let {
                context.contentResolver.openOutputStream(it)?.use { outputStream ->
                    // Write the PDF data to the OutputStream
                    withContext(Dispatchers.IO) {
                        pdfDocument.writeTo(outputStream)
                    }
                }
            }

            // Update the IS_PENDING status to 0 to indicate that the file is ready to be accessed
            values.clear()
            values.put(MediaStore.Downloads.IS_PENDING, 0)
            uri?.let { context.contentResolver.update(it, values, null, null) }
            // Show a toast message
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "Saved to Downloads folder.", Toast.LENGTH_SHORT)
                    .show()
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private suspend fun savePdfToDownloadsUsingFileIO(pdfDocument: PdfDocument) {
        // Get the Downloads directory
        val downloadsDir =
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)

        // Create a new file in the Downloads directory
        val file = File(downloadsDir, "josaa-made-easy.pdf")

        try {
            // Write the PDF data to the file
            withContext(Dispatchers.IO) {
                pdfDocument.writeTo(FileOutputStream(file))
            }

            // Show a toast message
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "Saved to Downloads folder.", Toast.LENGTH_SHORT)
                    .show()
            }
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}